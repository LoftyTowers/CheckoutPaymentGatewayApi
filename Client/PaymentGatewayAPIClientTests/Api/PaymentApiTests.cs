/* 
 * Payment Gateway API
 *
 * Payment Gateway API (ASP.NET Core 3.1)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PaymentGatewayAPIClient.Client;
using PaymentGatewayAPIClient.Api;
using PaymentGatewayAPIClient.Model;
using GatewayLoadTest;
using Moq;
using Microsoft.Extensions.Logging;
using PaymentGatewayAPIClient.Interfaces;

namespace PaymentGatewayAPIClient.Test
{
	/// <summary>
	///  Class for testing PaymentApi
	/// </summary>
	/// <remarks>
	/// This file is automatically generated by Swagger Codegen.
	/// Please update the test case below to test the API endpoint.
	/// </remarks>
	[TestFixture]
	public class PaymentApiTests
	{
		private PaymentApi instance;

		/// <summary>
		/// Setup before each unit test
		/// </summary>
		[SetUp]
		public void SetUp()
		{
			instance = new PaymentApi();


			MockRepository = new MockRepository(MockBehavior.Strict);
			MockLogger = MockRepository.Create<ILogger<PaymentsSetup>>(MockBehavior.Loose);
			MockPaymentApi = MockRepository.Create<IPaymentApi>(MockBehavior.Loose);

			MockRepository = new MockRepository(MockBehavior.Strict) { DefaultValue = DefaultValue.Empty };
		}

		/// <summary>
		/// Clean up after each unit test
		/// </summary>
		[TearDown]
		public void Cleanup()
		{

		}

		/// <summary>
		/// Test an instance of PaymentApi
		/// </summary>
		[Test, Category("InstanceTests")]
		public void InstanceTest()
		{
			Assert.IsInstanceOf(typeof(PaymentApi), instance, "instance is a PaymentApi");
		}

		/// <summary>
		/// Test CheckoutpaymentgatewayEchoGet
		/// </summary>
		[Test, Category("EchoTests")]
		public void CheckoutpaymentgatewayEchoGetTest()
		{
			string echo = "Please Respond";
			var response = instance.CheckoutpaymentgatewayEchoGet(echo);
			Assert.IsInstanceOf<string>(response, "response is string");
			Assert.AreEqual("\"Please Respond\"", response);

		}
		/// <summary>
		/// Test CheckoutpaymentgatewayGetpaymentGet
		/// </summary>
		//[Ignore("Needs PaymentId from the payment table in the API database")]
		[Test, Category("GetPaymentTests")]
		public void CheckoutpaymentgatewayGetpaymentGetTest()
		{
			//TODO: after a payment has been created get the ID from the db and insert it below, then coment out the ignore attribute.
			//NOTE: Please return to this state when development is done so others do not get false negative tests.
			Guid? body = new Guid("B6ACBE15-72E1-4D88-A989-34ED994372E5");
			var response = instance.CheckoutpaymentgatewayGetpaymentGet(body);
			Assert.IsInstanceOf<CheckoutPaymentGatewayModelsPaymentResponse>(response, "response is CheckoutPaymentGatewayModelsPaymentResponse");
			Assert.IsNotNull(response);
			Assert.IsNotNull(response.Amount);
			Assert.IsNotNull(response.CurrencyCode);
			Assert.IsNotNull(response.FullName);
			Assert.IsNotNull(response.Id);
			Assert.IsNotNull(response.IsSuccessful);
			Assert.IsNotNull(response.RequestDate);
			Assert.IsNotNull(response.IsSuccessful);
		}
		/// <summary>
		/// Test CheckoutpaymentgatewayPaymentrequestPost
		/// </summary>
		[Test, Category("SendPaymentTests")]
		public void CheckoutpaymentgatewayPaymentrequestPostTest()
		{
			var genPayment = new PaymentsSetup(MockLogger.Object, MockPaymentApi.Object);

			var response = instance.CheckoutpaymentgatewayPaymentrequestPost(genPayment.GeneratePayment(5425233430109903));
			Assert.IsInstanceOf<CheckoutPaymentGatewayModelsPaymentResponse>(response, "response is CheckoutPaymentGatewayModelsPaymentResponse");
			Assert.IsNotNull(response);
			Assert.IsNotNull(response.Amount);
			Assert.IsNotNull(response.CardExpiryDate);
			Assert.IsNotNull(response.CardNumber);
			Assert.IsNotNull(response.CurrencyCode);
			Assert.IsNotNull(response.Cvc);
			Assert.IsNotNull(response.FullName);
			Assert.IsNotNull(response.Id);
			Assert.IsNotNull(response.IsSuccessful);
			Assert.IsNotNull(response.RequestDate);
			Assert.IsTrue(response.IsSuccessful);
		}


		#region Properties 

		private MockRepository MockRepository { get; set; }

		private Mock<ILogger<PaymentsSetup>> MockLogger { get; set; }
		private Mock<IPaymentApi> MockPaymentApi { get; set; }

		#endregion
	}
}
