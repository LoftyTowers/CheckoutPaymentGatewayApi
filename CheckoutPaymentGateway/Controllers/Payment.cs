/*
 * Payment Gateway API
 *
 * Validates payment requests, stores card information, forwards payment requests and accepts responses from the acquiring bank.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using CheckoutPaymentGateway.Attributes;

using Microsoft.AspNetCore.Authorization;
using CheckoutPaymentGateway.Models;
using CheckoutPaymentGateway.Interfaces;
using Serilog;
using AutoMapper;
using Microsoft.Extensions.Logging;
using Common.Models;
using PaymentGatewayService.Interfaces;

namespace CheckoutPaymentGateway.Controllers
{
	/// <summary>
	/// 
	/// </summary>
	[ApiController]
	public class PaymentController : ControllerBase, IPaymentController
	{
		/// <summary>
		/// 
		/// </summary>
		/// <param name="log"></param>
		/// <param name="mapper"></param>
		public PaymentController(ILogger<PaymentController> log,
															IMapper mapper,
															IPaymentService paymentService)
		{
			Log = log;
			MyMapper = mapper;
			PaymentService = paymentService;
		}

		/// <summary>
		/// Generates a payment request with the gateway
		/// </summary>
		/// <remarks>Adds a payment</remarks>
		/// <param name="body">Payment to add</param>
		/// <response code="201">payment created</response>
		/// <response code="400">invalid input, object invalid</response>
		/// <response code="409">an existing payment already exists</response>
		[HttpPost]
		[Route("/checkoutpaymentgateway/paymentrequest")]
		[ValidateModelState]
		[SwaggerOperation("CreatePayment")]
		public virtual IActionResult CreatePayment([FromBody] PaymentRequest body)
		{
			try
			{
				Log.LogDebug($"RecievedPayment");

				var response = PaymentService.ProcessPayment(MyMapper.Map<Payment>(body));

				return Ok();

				//TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
				// return StatusCode(201);

				//TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
				// return StatusCode(400);

				//TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
				// return StatusCode(410);

				//TODO: Uncomment the next line to return response 420 or use other options such as return this.Duplicate(), return this.BadRequest(..), ...
				// return StatusCode(420);

			}
			catch (Exception ex)
			{
				Log.LogError(ex,ex.Message);
				return BadRequest(ex);
			}
		}

		#region Properties

		private ILogger<PaymentController> Log { get; }
		private IMapper MyMapper { get; }
		private IPaymentService PaymentService { get; }

		#endregion
	}
}
