/*
 * Payment Gateway API
 *
 * Validates payment requests, stores card information, forwards payment requests and accepts responses from the acquiring bank.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel;

namespace CheckoutPaymentGateway.Models
{
	/// <summary>
	/// This is the payment response contract for the merchant
	/// </summary>
	[DataContract]
	public partial class PaymentResponse : IEquatable<PaymentResponse>
	{
		/// <summary>
		/// Unique Identifier of the payment
		/// </summary>
		[Required]
		[DataMember(Name = "id")]
		public Guid Id { get; set; }

		/// <summary>
		/// The currency code the transaction is made in
		/// </summary>
		[Required]
		[DataMember(Name = "currencyCode")]
		[StringLength(3, ErrorMessage = "That is an invalid currency code. Currency codes should be 3 alpha characters.")]
		public string CurrencyCode { get; set; }

		/// <summary>
		/// The amount of the transaction
		/// </summary>
		[Required]
		[DataMember(Name = "amount")]
		public decimal? Amount { get; set; }

		/// <summary>
		/// The cvc customers card
		/// </summary>
		[Required]
		[DataMember(Name = "cvc")]
		public int? CVC { get; set; }

		/// <summary>
		/// The CardNumber for the transaction
		/// </summary>
		[Required]
		[DataMember(Name = "cardNumber")]
		public long? CardNumber { get; set; }

		/// <summary>
		/// The FullName of the customer as shown on the card
		/// </summary>
		[Required]
		[DataMember(Name = "fullName")]
		public string FullName { get; set; }

		/// <summary>
		/// The expiry date of the customers card
		/// </summary>
		[Required]
		[DataMember(Name = "cardExpiryDate")]
		public DateTime? CardExpiryDate { get; set; }

		/// <summary>
		/// The date the transaction was initilised
		/// </summary>
		[Required]
		[DataMember(Name = "requestDate")]
		public DateTime? RequestDate { get; set; }

		/// <summary>
		/// Descibes whether the payment was succesful or not
		/// </summary>
		[Required]
		[DataMember(Name = "isSuccessful")]
		[DefaultValue(false)]
		public bool? IsSuccessful { get; set; }

		/// <summary>
		/// Shows any further information if required (i.e. useful error messages)
		/// </summary>
		[DataMember(Name = "message")]
		public string Message { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class PaymentResponse {\n");
			sb.Append("  Id: ").Append(Id).Append("\n");
			sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
			sb.Append("  Amount: ").Append(Amount).Append("\n");
			sb.Append("  CVC: ").Append(CVC).Append("\n");
			sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
			sb.Append("  FullName: ").Append(FullName).Append("\n");
			sb.Append("  CardExpiryDate: ").Append(CardExpiryDate).Append("\n");
			sb.Append("  RequestDate: ").Append(RequestDate).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((PaymentResponse)obj);
		}

		/// <summary>
		/// Returns true if PaymentResponse instances are equal
		/// </summary>
		/// <param name="other">Instance of PaymentResponse to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(PaymentResponse other)
		{
			if (ReferenceEquals(null, other)) return false;
			if (ReferenceEquals(this, other)) return true;

			return
					(
							Id == other.Id ||
							Id != null &&
							Id.Equals(other.Id)
					) &&
					(
							CurrencyCode == other.CurrencyCode ||
							CurrencyCode != null &&
							CurrencyCode.Equals(other.CurrencyCode)
					) &&
					(
							Amount == other.Amount ||
							Amount != null &&
							Amount.Equals(other.Amount)
					) &&
					(
							CVC == other.CVC ||
							CVC != null &&
							CVC.Equals(other.CVC)
					) &&
					(
							CardNumber == other.CardNumber ||
							CardNumber != null &&
							CardNumber.Equals(other.CardNumber)
					) &&
					(
							FullName == other.FullName ||
							FullName != null &&
							FullName.Equals(other.FullName)
					) &&
					(
							CardExpiryDate == other.CardExpiryDate ||
							CardExpiryDate != null &&
							CardExpiryDate.Equals(other.CardExpiryDate)
					) &&
					(
							RequestDate == other.RequestDate ||
							RequestDate != null &&
							RequestDate.Equals(other.RequestDate)
					);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				var hashCode = 41;
				// Suitable nullity checks etc, of course :)
				if (Id != null)
					hashCode = hashCode * 59 + Id.GetHashCode();
				if (CurrencyCode != null)
					hashCode = hashCode * 59 + CurrencyCode.GetHashCode();
				if (Amount != null)
					hashCode = hashCode * 59 + Amount.GetHashCode();
				if (CVC != null)
					hashCode = hashCode * 59 + CVC.GetHashCode();
				if (CardNumber != null)
					hashCode = hashCode * 59 + CardNumber.GetHashCode();
				if (FullName != null)
					hashCode = hashCode * 59 + FullName.GetHashCode();
				if (CardExpiryDate != null)
					hashCode = hashCode * 59 + CardExpiryDate.GetHashCode();
				if (RequestDate != null)
					hashCode = hashCode * 59 + RequestDate.GetHashCode();
				return hashCode;
			}
		}

		#region Operators
#pragma warning disable 1591

		public static bool operator ==(PaymentResponse left, PaymentResponse right)
		{
			return Equals(left, right);
		}

		public static bool operator !=(PaymentResponse left, PaymentResponse right)
		{
			return !Equals(left, right);
		}

#pragma warning restore 1591
		#endregion Operators
	}
}
